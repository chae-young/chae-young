/*
호이스팅
자바스크립트는 변수선언과 함수선언을 끌어올린다.

선언만 위로 끌어올린다. 할당 x
선언에 할당할경우 분리가능.

var b;
b = function bb(){

}
*/

//console.log(b);
var b = function bb(){
    return 1
}


/*
함수표현식

함수선언문과 함수표현식의 차이점

>할당여부
함수선언문을 사용하면 전체가 호이스팅되지만
표현식을 사용하면
변수만 호이스팅 된다

함수표현식을 쓸것을 권한다.

var b = function(){

}

*/

/*
 스코프,실행컨텍스트

 스코프 = 함수가 정의될때
 실행컨텍스트 = 함수가 실행될때(사용자가 함수를 실행했을때 함수의 정보를 불러주는)

 실행컨텍스트가 생성되면서 this 바인딩과 호이스팅이 이루어짐.

 함수가 호출되면서 실행컨텍스트가 생성된다.
 선언문은 호이스팅된다.
 함수가 선언되면 그안의 변수들이 호이스팅된다.

 function a(){
     console.log('hi');
     var b = 0; <- 변수 호이스팅
 }


 1
 1
 3
 1

*/

/*
메소드

함수와 메소드는 .차이
.으로 this 바인딩
*/

/*
콜백함수

나의 제어권을 대상에게 넘긴다.
나를 너에게 넘길게.

setinterval (callback)
*/

[1,2,3].forEach(name,this)